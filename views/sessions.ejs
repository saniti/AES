<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Sessions - <%= appName %></title>
  <link rel="stylesheet" href="/css/themes.css">
  <link rel="stylesheet" href="/css/style.css">
  <script src="/js/locale.js"></script>
</head>
<body class="with-sidebar">
  <%- include('nav', { user: user }) %>

  <main class="main-content">
    <header class="top-header">
      <h1>Training Sessions</h1>
    </header>

    <div class="content-wrapper">
      <% if (demoMode) { %>
        <div class="alert alert-info">
          <strong>Demo Mode:</strong> Showing demo session data.
        </div>
      <% } %>

      <div class="sessions-controls">
        <div class="time-filter">
          <button class="filter-btn active" data-days="7">Past 7 Days</button>
          <button class="filter-btn" data-days="30">Past 30 Days</button>
          <button class="filter-btn" data-days="60">Past 60 Days</button>
          <button class="filter-btn" data-days="90">Past 90 Days</button>
          <button class="filter-btn" data-days="all">All</button>
        </div>
        
        <div class="search-filter">
          <input type="text" id="horseFilter" placeholder="Filter by horse name..." />
        </div>
      </div>

      <div id="loadingMessage" class="loading">Loading sessions...</div>
      <div id="errorMessage" class="error-message" style="display: none;"></div>
      <div id="emptyMessage" class="empty-message" style="display: none;">
        No sessions found for this period.
      </div>

      <div id="sessionsContainer" class="sessions-list"></div>
    </div>
  </main>

  <script>
    let allSessions = [];
    let currentStableId = null;
    let currentDays = 7;
    let filterHorseId = null;

    // Check for horse filter from URL
    const urlParams = new URLSearchParams(window.location.search);
    filterHorseId = urlParams.get('horseId');
    const filterDate = urlParams.get('date');
    if (filterHorseId) {
      const horseName = urlParams.get('horseName');
      if (horseName) {
        document.getElementById('horseFilter').value = horseName;
      }
    }

    // Load sessions when stable changes
    window.addEventListener('stableChanged', (e) => {
      currentStableId = e.detail.stableId;
      loadSessions(currentStableId, currentDays);
    });

    // Load sessions on page load
    document.addEventListener('DOMContentLoaded', () => {
      currentStableId = localStorage.getItem('selectedStable');
      if (currentStableId) {
        loadSessions(currentStableId, currentDays);
      } else {
        document.getElementById('loadingMessage').textContent = 'Please select a stable';
      }

      // Setup time filter buttons
      document.querySelectorAll('.filter-btn').forEach(btn => {
        btn.addEventListener('click', () => {
          document.querySelectorAll('.filter-btn').forEach(b => b.classList.remove('active'));
          btn.classList.add('active');
          const daysValue = btn.dataset.days;
          currentDays = daysValue === 'all' ? 'all' : parseInt(daysValue);
          loadSessions(currentStableId, currentDays);
        });
      });

      // Setup horse filter
      document.getElementById('horseFilter').addEventListener('input', filterSessions);
    });

    async function loadSessions(stableId, days) {
      if (!stableId) return;

      const loadingEl = document.getElementById('loadingMessage');
      const errorEl = document.getElementById('errorMessage');
      const emptyEl = document.getElementById('emptyMessage');
      const containerEl = document.getElementById('sessionsContainer');

      loadingEl.style.display = 'block';
      errorEl.style.display = 'none';
      emptyEl.style.display = 'none';
      containerEl.innerHTML = '';

      try {
        console.log(`Fetching sessions for stable ${stableId}, days: ${days}`);
        const response = await fetch(`/api/user/sessions/${stableId}/${days}`);
        
        if (!response.ok) {
          console.error('Sessions API response not ok:', response.status, response.statusText);
          throw new Error('Failed to fetch sessions');
        }

        allSessions = await response.json();
        console.log(`Received ${allSessions.length} sessions`);
        console.log('Sessions data:', allSessions);
        
        // Sort by startTime (most recent first)
        allSessions.sort((a, b) => {
          const dateA = new Date(a.startTime);
          const dateB = new Date(b.startTime);
          return dateB - dateA;
        });

        loadingEl.style.display = 'none';

        if (allSessions.length === 0) {
          emptyEl.style.display = 'block';
        } else {
          // Apply filtering if horseId is in URL
          filterSessions();
        }
      } catch (error) {
        console.error('Error loading sessions:', error);
        loadingEl.style.display = 'none';
        errorEl.textContent = 'Error loading sessions: ' + error.message;
        errorEl.style.display = 'block';
      }
    }

    function filterSessions() {
      const searchTerm = document.getElementById('horseFilter').value.toLowerCase();

      const filtered = allSessions.filter(session => {
        const matchesSearch = !searchTerm || 
          (session.horseName && session.horseName.toLowerCase().includes(searchTerm));
        
        // Match by horseId if specified in URL, otherwise allow all
        const matchesHorseId = !filterHorseId || String(session.horseId) === String(filterHorseId);

        return matchesSearch && matchesHorseId;
      });

      displaySessions(filtered);
    }

    function displaySessions(sessions) {
      const container = document.getElementById('sessionsContainer');
      const emptyEl = document.getElementById('emptyMessage');

      if (sessions.length === 0) {
        container.innerHTML = '';
        emptyEl.textContent = filterHorseId ? 'No sessions found for this horse' : 'No sessions match your filters';
        emptyEl.style.display = 'block';
        return;
      }

      emptyEl.style.display = 'none';

      container.innerHTML = sessions.map(session => {
        const duration = calculateDuration(session.startTime, session.stopTime);
        const isHighlighted = filterDate && new Date(session.startTime).getTime() === new Date(filterDate).getTime();
        return `
          <div class="session-card ${isHighlighted ? 'highlighted' : ''}" onclick="viewSession('${session.id}')">
            <div class="session-header">
              <div class="session-info">
                <h3 class="session-horse">${escapeHtml(session.horseName || 'Unknown Horse')}</h3>
                <span class="session-date">${formatDateTime(session.startTime)}</span>
              </div>
              <div class="traffic-indicator traffic-${String(session.trafficLight || session.injuryLevel || 'Green').toLowerCase()}">
                ${String(session.trafficLight || session.injuryLevel || 'Green') === 'Green' ? 'Low Risk' : String(session.trafficLight || session.injuryLevel || 'Yellow') === 'Yellow' ? 'Medium Risk' : String(session.trafficLight || session.injuryLevel || 'Red') === 'Red' ? 'High Risk' : 'Low Risk'}
              </div>
            </div>

            <div class="session-details">
              <div class="detail-item">
                <span class="icon">‚è±Ô∏è</span>
                <span class="label">Duration:</span>
                <span class="value">${duration}</span>
              </div>
              ${session.rider ? `
              <div class="detail-item">
                <span class="icon">üë§</span>
                <span class="label">Rider:</span>
                <span class="value">${escapeHtml(session.rider)}</span>
              </div>
              ` : ''}
              ${session.track ? `
              <div class="detail-item">
                <span class="icon">üèÅ</span>
                <span class="label">Track:</span>
                <span class="value">${escapeHtml(session.track)}</span>
              </div>
              ` : ''}
              <div class="detail-item">
                <span class="icon">üïê</span>
                <span class="label">Started:</span>
                <span class="value">${formatTime(session.startTime)}</span>
              </div>
            </div>
          </div>
        `;
      }).join('');
    }

    function viewSession(sessionId) {
      window.location.href = `/session/${sessionId}`;
    }

    function calculateDuration(startTime, stopTime) {
      if (!startTime || !stopTime) return 'N/A';
      const start = new Date(startTime);
      const stop = new Date(stopTime);
      const diffMs = stop - start;
      const diffMins = Math.floor(diffMs / 60000);
      const hours = Math.floor(diffMins / 60);
      const mins = diffMins % 60;
      
      if (hours > 0) {
        return `${hours}h ${mins}m`;
      }
      return `${mins}m`;
    }

    function formatDateTime(dateStr) {
      if (!dateStr) return 'N/A';
      const locale = getCurrentLocale();
      const date = new Date(dateStr);
      const localeCode = LOCALES[locale]?.dateFormat || 'en-AU';
      return date.toLocaleDateString(localeCode, { 
        weekday: 'short',
        year: 'numeric', 
        month: 'short', 
        day: 'numeric' 
      });
    }

    function formatTime(dateStr) {
      if (!dateStr) return 'N/A';
      const locale = getCurrentLocale();
      const date = new Date(dateStr);
      const localeCode = LOCALES[locale]?.dateFormat || 'en-AU';
      return date.toLocaleTimeString(localeCode, { 
        hour: '2-digit', 
        minute: '2-digit'
      });
    }

    function escapeHtml(text) {
      const div = document.createElement('div');
      div.textContent = text;
      return div.innerHTML;
    }
  </script>
</body>
</html>
