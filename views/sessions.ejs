<!DOCTYPE html>
<html lang="en" data-theme="default">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Sessions - Alerte Equine Science</title>
  <link rel="icon" type="image/svg+xml" href="/favicon.svg">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <link rel="stylesheet" href="/css/style.css">
  <link rel="stylesheet" href="/css/themes.css">
  <script>
    // Risk mapping from server
    const riskMapping = <%- JSON.stringify(riskMapping) %>;
    function getRiskLabel(trafficLight) {
      const key = String(trafficLight || 'green').toLowerCase();
      return riskMapping[key] || riskMapping.default;
    }
  </script>
</head>
<body class="with-sidebar">
  <%- include('nav') %>
  <script>
    // Apply saved theme immediately
    const savedTheme = localStorage.getItem('theme') || 'default';
    document.documentElement.setAttribute('data-theme', savedTheme);
  </script>

  <div class="main-content">
    <div class="page-header">
      <h1>Training Sessions</h1>
    </div>

    <div class="filters-container">
      <div class="time-filters">
        <button class="filter-btn active" data-days="7">Past 7 Days</button>
        <button class="filter-btn" data-days="30">Past 30 Days</button>
        <button class="filter-btn" data-days="60">Past 60 Days</button>
        <button class="filter-btn" data-days="90">Past 90 Days</button>
        <button class="filter-btn" data-days="all">All</button>
      </div>

      <div class="search-filters">
        <input type="text" id="searchInput" placeholder="Search by horse name..." class="search-input">
      </div>
    </div>

    <div id="loadingMessage" class="loading-message">Loading sessions...</div>
    <div id="errorMessage" class="error-message" style="display: none;"></div>
    <div id="emptyMessage" class="empty-message" style="display: none;">No sessions found</div>

    <div id="sessionsContainer" class="sessions-list"></div>
  </div>

  <script>
    let allSessions = [];
    let currentStableId = null;
    let currentDays = 7;
    let filterHorseId = null;
    let filterDate = null;

    // Get URL parameters
    const urlParams = new URLSearchParams(window.location.search);
    filterHorseId = urlParams.get('horseId');
    filterDate = urlParams.get('date');

    function escapeHtml(unsafe) {
      if (!unsafe) return '';
      return unsafe
        .toString()
        .replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;")
        .replace(/"/g, "&quot;")
        .replace(/'/g, "&#039;");
    }

    function calculateDuration(startTime, stopTime) {
      if (!startTime || !stopTime) return 'N/A';
      const start = new Date(startTime);
      const stop = new Date(stopTime);
      const durationMs = stop - start;
      
      const totalSeconds = Math.floor(durationMs / 1000);
      const hours = Math.floor(totalSeconds / 3600);
      const minutes = Math.floor((totalSeconds % 3600) / 60);
      const seconds = totalSeconds % 60;
      
      return `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
    }

    function formatDateTime(dateStr) {
      if (!dateStr) return 'N/A';
      const date = new Date(dateStr);
      const locale = getCurrentLocale();
      
      const now = new Date();
      const diffMs = now - date;
      const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
      
      if (diffDays === 0) {
        return `${translate('today')} ${date.toLocaleTimeString(locale, { hour: '2-digit', minute: '2-digit' })}`;
      } else if (diffDays === 1) {
        return `${translate('yesterday')} ${date.toLocaleTimeString(locale, { hour: '2-digit', minute: '2-digit' })}`;
      } else {
        return date.toLocaleDateString(locale, { year: '2-digit', month: 'short', day: 'numeric', hour: '2-digit', minute: '2-digit' });
      }
    }

    function formatTime(dateStr) {
      if (!dateStr) return 'N/A';
      const date = new Date(dateStr);
      const locale = getCurrentLocale();
      return date.toLocaleTimeString(locale, { hour: '2-digit', minute: '2-digit' });
    }

    async function loadSessions(days) {
      console.log('loadSessions called with days:', days, 'stableId:', currentStableId);
      
      if (!currentStableId) {
        console.error('No stable selected');
        return;
      }
      
      const loadingEl = document.getElementById('loadingMessage');
      const errorEl = document.getElementById('errorMessage');
      const emptyEl = document.getElementById('emptyMessage');
      const container = document.getElementById('sessionsContainer');

      loadingEl.style.display = 'block';
      errorEl.style.display = 'none';
      emptyEl.style.display = 'none';
      container.innerHTML = '';

      try {
        const url = `/api/user/sessions/${currentStableId}/${days}`;
        console.log('Fetching from:', url);
        const response = await fetch(url);
        
        if (!response.ok) {
          console.error('Response not OK:', response.status, response.statusText);
          throw new Error(`Failed to load sessions: ${response.status}`);
        }

        allSessions = await response.json();
        console.log('Loaded sessions:', allSessions.length, 'sessions');
        console.log('First session:', allSessions[0]);
        
        loadingEl.style.display = 'none';
        filterSessions();
      } catch (error) {
        console.error('Error loading sessions:', error);
        loadingEl.style.display = 'none';
        errorEl.textContent = 'Error loading sessions: ' + error.message;
        errorEl.style.display = 'block';
      }
    }

    function filterSessions() {
      const searchTerm = document.getElementById('searchInput').value.toLowerCase();
      
      const filtered = allSessions.filter(session => {
        // Match by search term (horse name)
        const matchesSearch = !searchTerm || 
          (session.horseName && session.horseName.toLowerCase().includes(searchTerm));
        
        // Match by horseId if specified in URL, otherwise allow all
        const matchesHorseId = !filterHorseId || String(session.horseId) === String(filterHorseId);

        return matchesSearch && matchesHorseId;
      });

      displaySessions(filtered);
    }

    function displaySessions(sessions) {
      const container = document.getElementById('sessionsContainer');
      const emptyEl = document.getElementById('emptyMessage');

      if (sessions.length === 0) {
        container.innerHTML = '';
        emptyEl.textContent = filterHorseId ? 'No sessions found for this horse' : 'No sessions match your filters';
        emptyEl.style.display = 'block';
        return;
      }

      emptyEl.style.display = 'none';

      // Create horizontal layout matching horses page exactly

      container.innerHTML = sessions.map(session => {
        console.log('Session data:', {
          horseName: session.horseName,
          horseAlias: session.horseAlias,
          trafficLight: session.trafficLight,
          injuryLevel: session.injuryLevel
        });
        const duration = calculateDuration(session.startTime, session.stopTime);
        const isHighlighted = filterDate && new Date(session.startTime).getTime() === new Date(filterDate).getTime();
        const injuryRisk = String(session.trafficLight || session.injuryLevel || 'green').toLowerCase();
        const horseName = session.horseName || 'Unknown Horse';
        const alias = session.horseAlias || session.alias || '';
        
        return `
          <div class="horse-card-horizontal ${isHighlighted ? 'highlighted' : ''}" onclick="viewSession('${session.id}')" style="cursor: pointer;">
            <div class="horse-main-info">
              <div class="horse-name-badge">
                <h3 class="horse-name">${escapeHtml(horseName)}</h3>
                ${alias ? `<span class="horse-alias">${escapeHtml(alias)}</span>` : ''}
              </div>
              <div class="traffic-indicator traffic-${injuryRisk}" style="background-color: ${injuryRisk === 'green' ? '#10b981' : injuryRisk === 'yellow' ? '#f59e0b' : injuryRisk === 'red' ? '#ef4444' : '#10b981'}; color: white; padding: 4px 10px; border-radius: 12px; font-size: 10px; font-weight: 600; text-transform: uppercase;">
                ${getRiskLabel(session.trafficLight || session.injuryLevel)}
              </div>
            </div>
            
            <table class="horse-details-table">
              <tr>
                <th>Session Date/Time</th>
                <th>Duration</th>
                <th>Rider</th>
                <th>Track</th>
              </tr>
              <tr>
                <td>${formatDateTime(session.startTime)}</td>
                <td>${duration}</td>
                <td>${escapeHtml(session.rider || 'N/A')}</td>
                <td>${escapeHtml(session.track || 'N/A')}</td>
              </tr>
            </table>
          </div>
        `;
      }).join('');
    }

    function viewSession(sessionId) {
      window.location.href = `/performance/${sessionId}`;
    }

    // Event listeners
    document.querySelectorAll('.filter-btn').forEach(btn => {
      btn.addEventListener('click', () => {
        document.querySelectorAll('.filter-btn').forEach(b => b.classList.remove('active'));
        btn.classList.add('active');
        const days = btn.dataset.days;
        currentDays = days;
        console.log('Filter button clicked:', days);
        // Pass the string 'all' directly, don't convert to number
        loadSessions(days);
      });
    });

    document.getElementById('searchInput').addEventListener('input', filterSessions);

    // Listen for stable changes (after initial load)
    window.addEventListener('stableChanged', (e) => {
      if (hasLoaded) {
        currentStableId = e.detail.stableId;
        loadSessions(currentDays);
      }
    });

    // Helper functions for locale
    function getCurrentLocale() {
      return localStorage.getItem('userLocale') || 'en-AU';
    }
    
    function translate(key) {
      const translations = {
        'today': { 'en-AU': 'Today', 'en-US': 'Today', 'es-ES': 'Hoy' },
        'yesterday': { 'en-AU': 'Yesterday', 'en-US': 'Yesterday', 'es-ES': 'Ayer' }
      };
      const locale = getCurrentLocale();
      return translations[key]?.[locale] || key;
    }

    // Initial load - wait for DOM and stables to load
    document.addEventListener('DOMContentLoaded', () => {
      // Wait a bit for nav.ejs to load stables
      setTimeout(() => {
        const stableSelect = document.getElementById('stableSelect');
        if (stableSelect && stableSelect.value) {
          currentStableId = stableSelect.value;
          loadSessions(currentDays);
        }
      }, 500);
    });
    
    // Also trigger initial load if stableChanged fires first
    let hasLoaded = false;
    window.addEventListener('stableChanged', (e) => {
      currentStableId = e.detail.stableId;
      if (!hasLoaded) {
        hasLoaded = true;
        loadSessions(currentDays);
      }
    }, { once: true });
  </script>
</body>
</html>
