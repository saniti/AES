<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="icon" type="image/svg+xml" href="/favicon.svg">
  <title>Horses - <%= appName %></title>
  <link rel="stylesheet" href="/fonts/css/all.min.css">
  <link rel="stylesheet" href="/css/themes.css">
  <link rel="stylesheet" href="/css/style.css">
  <script>
    // Risk mapping from server
    const riskMapping = <%- JSON.stringify(riskMapping) %>;
    function getRiskLabel(trafficLight) {
      const key = String(trafficLight || 'green').toLowerCase();
      return riskMapping[key] || riskMapping.default;
    }
  </script>
</head>
<body class="with-sidebar">
  <%- include('nav', { user: user }) %>

  <main class="main-content">
    <header class="top-header">
      <h1 id="horsesPageTitle">Horses</h1>
    </header>

    <div class="content-wrapper">
      <% if (demoMode) { %>
        <div class="alert alert-info">
          <strong>Demo Mode:</strong> Showing demo horse data.
        </div>
      <% } %>

      <div class="horses-controls">
        <div class="filters">
          <input type="text" id="searchInput" placeholder="Search by name, brand, or RFID..." />
          <select id="statusFilter">
            <option value="">All Status</option>
            <option value="Active">Active</option>
            <option value="Inactive">Inactive</option>
            <option value="Retired">Retired</option>
          </select>
          <select id="genderFilter">
            <option value="">All Genders</option>
            <option value="Male">Male</option>
            <option value="Female">Female</option>
            <option value="Gelding">Gelding</option>
          </select>
          <select id="injuryRiskFilter">
            <option value="">All Injury Risks</option>
            <option value="Green">Low Risk (Green)</option>
            <option value="Yellow">Medium Risk (Yellow)</option>
            <option value="Red">High Risk (Red)</option>
            <option value="None">No Assessment</option>
          </select>
        </div>
      </div>

      <div id="loadingMessage" class="loading">Loading horses...</div>
      <div id="errorMessage" class="error-message" style="display: none;"></div>
      <div id="emptyMessage" class="empty-message" style="display: none;">
        No horses found for this stable.
      </div>

      <div id="unassignedSection" style="display: none;">
        <h2 style="margin-bottom: 20px;">Unassigned Sessions</h2>
        <div id="unassignedLoading" class="loading" style="display: none;">Loading unassigned sessions...</div>
        <div id="unassignedEmpty" class="empty-message" style="display: none;">No unassigned sessions</div>
        <div id="unassignedContainer" class="unassigned-sessions" style="margin-bottom: 40px;"></div>
      </div>

      <h2 style="margin-bottom: 20px;">Horses</h2>
      <div id="horsesContainer" class="horses-list"></div>
    </div>
  </main>

  <!-- Edit Horse Modal -->
  <div id="editModal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h2>Edit Horse</h2>
        <button class="modal-close" onclick="closeEditModal()">&times;</button>
      </div>
      <div class="modal-body">
        <input type="hidden" id="editHorseId" />
        
        <div class="form-group">
          <label for="editHorseName">Name *</label>
          <input type="text" id="editHorseName" required />
        </div>
        
        <div class="form-group">
          <label for="editHorseAlias">Alias</label>
          <input type="text" id="editHorseAlias" />
        </div>
        
        <div class="form-group">
          <label for="editHorseBrand">Brand</label>
          <input type="text" id="editHorseBrand" />
        </div>
        
        <div class="form-group">
          <label for="editHorseRfid">RFID</label>
          <input type="text" id="editHorseRfid" />
        </div>
        
        <div class="form-group">
          <label for="editHorseDob">Date of Birth</label>
          <input type="date" id="editHorseDob" />
        </div>
      </div>
      <div class="modal-footer">
        <button class="btn btn-secondary" onclick="closeEditModal()">Cancel</button>
        <button class="btn btn-primary" onclick="saveHorse()">Save Changes</button>
      </div>
    </div>
  </div>

  <!-- Assign Horse Modal -->
  <div id="assignModal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h2>Assign Horse to Session</h2>
        <button class="modal-close" onclick="closeAssignModal()">&times;</button>
      </div>
      <div class="modal-body">
        <div class="form-group">
          <label for="assignHorseSearch">Search Horse</label>
          <input type="text" id="assignHorseSearch" placeholder="Search by name..." onkeyup="filterAssignHorses()" />
        </div>
        <div id="assignHorseList" class="horse-list" style="max-height: 400px; overflow-y: auto;">
          <!-- Horse list will be populated here -->
        </div>
      </div>
      <div class="modal-footer">
        <button class="btn btn-secondary" onclick="closeAssignModal()">Cancel</button>
      </div>
    </div>
  </div>

  <script>
    let allHorses = [];
    let currentStableId = null;
    let currentAssignSessionId = null;

    // Update page title with stable name
    function updatePageTitle(stableName) {
      const titleEl = document.getElementById('horsesPageTitle');
      if (titleEl) {
        titleEl.textContent = `Horses for ${stableName || 'Selected Stable'}`;
          // Load horses when stable changes
    window.addEventListener('stableChanged', (e) => {
      currentStableId = e.detail.stableId;
      const stableName = e.detail.stableName || 'Selected Stable';
      updatePageTitle(stableName);
      loadHorses();
      loadUnassignedSessions(currentStableId);
    });

    // Load status values from API
    async function loadStatusValues() {
      try {
        const response = await fetch('/api/user/dropdowns/status');
        if (response.ok) {
          const statuses = await response.json();
          const statusFilter = document.getElementById('statusFilter');
          // Clear existing options except "All Status"
          statusFilter.innerHTML = '<option value="">All Status</option>';
          statuses.forEach(status => {
            const option = document.createElement('option');
            option.value = status;
            option.textContent = status;
            statusFilter.appendChild(option);
          });
        }
      } catch (error) {
        console.error('Failed to load status values:', error);
      }
    }

    // Load horses on page load
    document.addEventListener('DOMContentLoaded', () => {
      loadStatusValues();
      currentStableId = localStorage.getItem('selectedStable');
      if (currentStableId) {
        // Delay title update to ensure stableSelect is populated
        setTimeout(() => {
          updatePageTitle();
        }, 500);
        loadHorses(currentStableId);
        loadUnassignedSessions(currentStableId);
      } else {
        document.getElementById('loadingMessage').textContent = 'Please select a stable';
      }

      // Setup filters
      document.getElementById('searchInput').addEventListener('input', filterHorses);
      document.getElementById('statusFilter').addEventListener('change', filterHorses);
      document.getElementById('genderFilter').addEventListener('change', filterHorses);
      document.getElementById('injuryRiskFilter').addEventListener('change', filterHorses);
    });

    async function loadHorses(stableId) {
      if (!stableId) return;

      const loadingEl = document.getElementById('loadingMessage');
      const errorEl = document.getElementById('errorMessage');
      const emptyEl = document.getElementById('emptyMessage');
      const containerEl = document.getElementById('horsesContainer');

      loadingEl.style.display = 'block';
      errorEl.style.display = 'none';
      emptyEl.style.display = 'none';
      containerEl.innerHTML = '';

      try {
        const response = await fetch(`/api/user/horses/${stableId}`);
        
        if (!response.ok) {
          throw new Error('Failed to fetch horses');
        }

        allHorses = await response.json();
        
        // Sort by lastSession (most recent first)
        allHorses.sort((a, b) => {
          const dateA = a.lastSession ? new Date(a.lastSession) : new Date(0);
          const dateB = b.lastSession ? new Date(b.lastSession) : new Date(0);
          return dateB - dateA;
        });

        loadingEl.style.display = 'none';

        if (allHorses.length === 0) {
          emptyEl.style.display = 'block';
        } else {
          displayHorses(allHorses);
        }
      } catch (error) {
        console.error('Error loading horses:', error);
        loadingEl.style.display = 'none';
        errorEl.textContent = 'Error loading horses: ' + error.message;
        errorEl.style.display = 'block';
      }
    }

    function filterHorses() {
      const searchTerm = document.getElementById('searchInput').value.toLowerCase();
      const statusFilter = document.getElementById('statusFilter').value;
      const genderFilter = document.getElementById('genderFilter').value;
      const injuryRiskFilter = document.getElementById('injuryRiskFilter').value;

      const filtered = allHorses.filter(horse => {
        const matchesSearch = !searchTerm || 
          (horse.name && horse.name.toLowerCase().includes(searchTerm)) ||
          (horse.brand && horse.brand.toLowerCase().includes(searchTerm)) ||
          (horse.rfid && horse.rfid.toLowerCase().includes(searchTerm));

        const matchesStatus = !statusFilter || horse.status === statusFilter;
        const matchesGender = !genderFilter || horse.gender === genderFilter;
        const matchesInjuryRisk = !injuryRiskFilter || 
          (injuryRiskFilter === 'None' ? !horse.traffic : horse.traffic === injuryRiskFilter);

        return matchesSearch && matchesStatus && matchesGender && matchesInjuryRisk;
      });

      displayHorses(filtered);
    }

    function displayHorses(horses) {
      const container = document.getElementById('horsesContainer');
      const emptyEl = document.getElementById('emptyMessage');

      if (horses.length === 0) {
        container.innerHTML = '';
        emptyEl.textContent = 'No horses match your filters';
        emptyEl.style.display = 'block';
        return;
      }

      emptyEl.style.display = 'none';

      container.innerHTML = horses.map(horse => {
        const age = calculateAge(horse.dateOfBirth);
        return `
        <div class="horse-card-horizontal">
          <div class="horse-main-info">
            <div class="horse-name-badge">
              <h3 class="horse-name">
                <a href="/sessions?horseId=${horse.id}&horseName=${encodeURIComponent(horse.name || 'Unnamed')}" class="horse-name-link">
                  ${escapeHtml(horse.name || 'Unnamed')}
                </a>
              </h3>
              ${horse.alias ? `<span class="horse-alias">${escapeHtml(horse.alias)}</span>` : ''}
            </div>
            <div class="traffic-indicator traffic-${String(horse.traffic || 'Green').toLowerCase()}">
              ${getRiskLabel(horse.traffic)}
            </div>
          </div>
          
          <table class="horse-details-table">
            <tr>
              <th>Brand</th>
              <th>Gender</th>
              <th>Age</th>
              <th>Status</th>
              <th>Last Session</th>
              ${horse.rfid ? '<th>RFID</th>' : ''}
            </tr>
            <tr>
              <td>${escapeHtml(horse.brand || 'N/A')}</td>
              <td>${escapeHtml(horse.gender || 'N/A')}</td>
              <td>${age}</td>
              <td class="status-${(horse.status || 'Active').toLowerCase()}">${escapeHtml(horse.status || 'Active')}</td>
              <td>${horse.lastSession ? `<span class="session-link" onclick="goToPerformance('${horse.id}', '${horse.lastSession}', '${escapeHtml(horse.name)}')">${ formatDateTimeShort(horse.lastSession)}</span>` : 'Never'}</td>
              ${horse.rfid ? `<td>${escapeHtml(horse.rfid)}</td>` : ''}
            </tr>
          </table>

          <div class="horse-actions-horizontal">
            <button class="btn-icon" onclick="editHorse('${horse.id}')" title="Edit">✏️</button>
            <button class="btn-icon" onclick="viewSessions('${horse.id}', '${escapeHtml(horse.name)}')" title="View Sessions">🏃</button>
          </div>
        </div>
      `;
      }).join('');
    }

    function editHorse(horseId) {
      const horse = allHorses.find(h => h.id === horseId);
      if (!horse) return;

      // Populate modal
      document.getElementById('editHorseId').value = horse.id;
      document.getElementById('editHorseName').value = horse.name || '';
      document.getElementById('editHorseAlias').value = horse.alias || '';
      document.getElementById('editHorseBrand').value = horse.brand || '';
      document.getElementById('editHorseRfid').value = horse.rfid || '';
      document.getElementById('editHorseDob').value = horse.dateOfBirth ? horse.dateOfBirth.split('T')[0] : '';
      
      // Show modal
      document.getElementById('editModal').style.display = 'flex';
    }

    function viewSessions(horseId, horseName) {
      window.location.href = `/sessions?horseId=${horseId}&horseName=${encodeURIComponent(horseName)}`;
    }

    async function goToPerformance(horseId, lastSessionDate, horseName) {
      // Store horse info for performance page
      sessionStorage.setItem('currentHorseName', horseName || 'Unknown Horse');
      sessionStorage.setItem('currentHorseId', horseId);
      
      // Fetch the most recent session for this horse
      try {
        const response = await fetch(`/api/user/sessions/${currentStableId}/7`);
        if (!response.ok) throw new Error('Failed to fetch sessions');
        
        const sessions = await response.json();
        
        // Find the most recent session for this horse
        const horseSessions = sessions.filter(s => String(s.horseId) === String(horseId));
        
        if (horseSessions.length > 0) {
          // Sort by startTime descending and get the most recent
          horseSessions.sort((a, b) => new Date(b.startTime) - new Date(a.startTime));
          const latestSession = horseSessions[0];
          
          // Navigate directly to performance page
          window.location.href = `/performance/${latestSession.id}`;
        } else {
          alert('No sessions found for this horse');
        }
      } catch (error) {
        console.error('Error:', error);
        alert('Could not load session: ' + error.message);
      }
    }

    function closeEditModal() {
      document.getElementById('editModal').style.display = 'none';
    }

    async function saveHorse() {
      const horseId = document.getElementById('editHorseId').value;
      const data = {
        name: document.getElementById('editHorseName').value,
        alias: document.getElementById('editHorseAlias').value,
        brand: document.getElementById('editHorseBrand').value,
        rfid: document.getElementById('editHorseRfid').value,
        dateOfBirth: document.getElementById('editHorseDob').value
      };

      try {
        const response = await fetch(`/api/user/horses/${horseId}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(data)
        });

        if (!response.ok) {
          throw new Error('Failed to update horse');
        }

        alert('Horse updated successfully');
        closeEditModal();
        loadHorses(currentStableId);
      } catch (error) {
        console.error('Error updating horse:', error);
        alert('Error updating horse: ' + error.message);
      }
    }

    function calculateAge(dateOfBirth) {
      if (!dateOfBirth) return 'N/A';
      const today = new Date();
      const birthDate = new Date(dateOfBirth);
      let age = today.getFullYear() - birthDate.getFullYear();
      const monthDiff = today.getMonth() - birthDate.getMonth();
      if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
        age--;
      }
      return age >= 0 ? `${age} yrs` : 'N/A';
    }

    function formatDateLocal(dateStr) {
      if (!dateStr) return 'N/A';
      const locale = getCurrentLocale();
      const date = new Date(dateStr);
      const localeCode = LOCALES[locale]?.dateFormat || 'en-AU';
      return date.toLocaleDateString(localeCode, { year: 'numeric', month: 'short', day: 'numeric' });
    }

    function formatDateTimeShort(dateStr) {
      if (!dateStr) return 'N/A';
      const locale = getCurrentLocale();
      const date = new Date(dateStr);
      const localeCode = LOCALES[locale]?.dateFormat || 'en-AU';
      return date.toLocaleString(localeCode, { 
        year: '2-digit',
        month: 'short', 
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
    }

    function formatDateTime(dateStr) {
      if (!dateStr) return 'N/A';
      const date = new Date(dateStr);
      const now = new Date();
      const diffDays = Math.floor((now - date) / (1000 * 60 * 60 * 24));
      
      const locale = getCurrentLocale();
      const translations = {
        'en-AU': { today: 'Today', yesterday: 'Yesterday', daysAgo: 'days ago' },
        'en-US': { today: 'Today', yesterday: 'Yesterday', daysAgo: 'days ago' },
        'es-ES': { today: 'Hoy', yesterday: 'Ayer', daysAgo: 'días atrás' }
      };
      const t = translations[locale] || translations['en-AU'];
      
      if (diffDays === 0) return t.today;
      if (diffDays === 1) return t.yesterday;
      if (diffDays < 7) return `${diffDays} ${t.daysAgo}`;
      
      return formatDateLocal(dateStr);
    }

    function formatDateTimeLocal(dateStr) {
      if (!dateStr) return 'N/A';
      const locale = getCurrentLocale();
      const date = new Date(dateStr);
      const localeCode = LOCALES[locale]?.dateFormat || 'en-AU';
      return date.toLocaleDateString(localeCode, { 
        weekday: 'short',
        year: 'numeric', 
        month: 'short', 
        day: 'numeric' 
      });
    }

    async function loadUnassignedSessions(stableId) {
      if (!stableId) return;

      const sectionEl = document.getElementById('unassignedSection');
      const loadingEl = document.getElementById('unassignedLoading');
      const emptyEl = document.getElementById('unassignedEmpty');
      const containerEl = document.getElementById('unassignedContainer');

      sectionEl.style.display = 'block';
      loadingEl.style.display = 'block';
      emptyEl.style.display = 'none';
      containerEl.innerHTML = '';

      try {
        const response = await fetch(`/api/user/sessions/unassigned/${stableId}`);
        
        if (!response.ok) {
          const errorText = await response.text();
          console.error('Unassigned sessions response not ok:', response.status, response.statusText, errorText);
          loadingEl.style.display = 'none';
          emptyEl.textContent = `Error loading unassigned sessions: ${response.status}`;
          emptyEl.style.display = 'block';
          return;
        }

        const sessions = await response.json();
        console.log('Unassigned sessions received:', sessions, 'Count:', Array.isArray(sessions) ? sessions.length : 'not an array');
        loadingEl.style.display = 'none';

        if (!sessions || sessions.length === 0) {
          emptyEl.textContent = 'No unassigned sessions';
          emptyEl.style.display = 'block';
          sectionEl.style.display = 'none'; // Hide section if empty
        } else {
          emptyEl.style.display = 'none';
          sectionEl.style.display = 'block'; // Ensure section is visible if data exists
          displayUnassignedSessions(sessions);
        }
      } catch (error) {
        console.error('Error loading unassigned sessions:', error);
        loadingEl.style.display = 'none';
        emptyEl.textContent = 'Error loading unassigned sessions';
        emptyEl.style.display = 'block';
      }
    }

    function displayUnassignedSessions(sessions) {
      const container = document.getElementById('unassignedContainer');
      const loadingEl = document.getElementById('unassignedLoading');
      const emptyEl = document.getElementById('unassignedEmpty');

      loadingEl.style.display = 'none';

      if (!sessions || sessions.length === 0) {
        emptyEl.style.display = 'block';
        return;
      }

      emptyEl.style.display = 'none';

      container.innerHTML = sessions.map(session => {
        const duration = calculateDuration(session.startTime, session.stopTime);
        const injuryRisk = String(session.trafficLight || session.injuryLevel || 'green').toLowerCase();
        const riskLabel = getRiskLabel(session.trafficLight || session.injuryLevel);
        
        return `
          <div class="horse-card-horizontal">
            <div class="horse-main-info">
              <div class="horse-name-badge">
                <h3 class="horse-name">Unassigned Session</h3>
                <span class="horse-alias">No horse assigned</span>
              </div>
              <div class="traffic-indicator traffic-${injuryRisk}" style="background-color: ${injuryRisk === 'green' ? '#10b981' : injuryRisk === 'yellow' ? '#f59e0b' : injuryRisk === 'red' ? '#ef4444' : '#10b981'}; color: white; padding: 4px 10px; border-radius: 12px; font-size: 10px; font-weight: 600; text-transform: uppercase;">
                ${riskLabel}
              </div>
            </div>
            
            <table class="horse-details-table">
              <tr>
                <th>Session Date/Time</th>
                <th>Duration</th>
                <th>Rider</th>
                <th>Track</th>
              </tr>
              <tr>
                <td>${formatDateTimeLocal(session.startTime)}</td>
                <td>${duration}</td>
                <td>${escapeHtml(session.rider || 'N/A')}</td>
                <td>${escapeHtml(session.track || 'N/A')}</td>
              </tr>
            </table>
            
            <div class="horse-actions-horizontal">
              <button class="btn btn-primary" onclick="openAssignModal('${session.recordingId}')" title="Assign Horse">
                <i class="fas fa-link"></i> Assign Horse
              </button>
            </div>
          </div>
        `;
      }).join('');
    }

    function openAssignModal(recordingId) {
      currentAssignSessionId = recordingId;
      const modal = document.getElementById('assignModal');
      const horseList = document.getElementById('assignHorseList');
      
      // Populate horse list
      horseList.innerHTML = allHorses.map(horse => `
        <div class="horse-list-item" onclick="selectHorseForAssign('${horse.id}')" style="padding: 12px; border: 1px solid var(--border-color); border-radius: 4px; margin-bottom: 8px; cursor: pointer; transition: all 0.2s;" onmouseover="this.style.backgroundColor='var(--bg-secondary)'" onmouseout="this.style.backgroundColor='transparent'">
          <div style="font-weight: 600;">${escapeHtml(horse.name)}</div>
          ${horse.alias ? `<div style="font-size: 12px; color: var(--text-secondary);">${escapeHtml(horse.alias)}</div>` : ''}
          <div style="font-size: 12px; color: var(--text-secondary);">${escapeHtml(horse.brand || 'N/A')} • ${escapeHtml(horse.gender || 'N/A')}</div>
        </div>
      `).join('');
      
      modal.style.display = 'block';
    }

    function closeAssignModal() {
      const modal = document.getElementById('assignModal');
      modal.style.display = 'none';
      currentAssignSessionId = null;
      document.getElementById('assignHorseSearch').value = '';
    }

    function filterAssignHorses() {
      const searchTerm = document.getElementById('assignHorseSearch').value.toLowerCase();
      const horseList = document.getElementById('assignHorseList');
      
      const filteredHorses = allHorses.filter(horse => 
        horse.name.toLowerCase().includes(searchTerm) ||
        (horse.alias && horse.alias.toLowerCase().includes(searchTerm))
      );
      
      horseList.innerHTML = filteredHorses.map(horse => `
        <div class="horse-list-item" onclick="selectHorseForAssign('${horse.id}')" style="padding: 12px; border: 1px solid var(--border-color); border-radius: 4px; margin-bottom: 8px; cursor: pointer; transition: all 0.2s;" onmouseover="this.style.backgroundColor='var(--bg-secondary)'" onmouseout="this.style.backgroundColor='transparent'">
          <div style="font-weight: 600;">${escapeHtml(horse.name)}</div>
          ${horse.alias ? `<div style="font-size: 12px; color: var(--text-secondary);">${escapeHtml(horse.alias)}</div>` : ''}
          <div style="font-size: 12px; color: var(--text-secondary);">${escapeHtml(horse.brand || 'N/A')} • ${escapeHtml(horse.gender || 'N/A')}</div>
        </div>
      `).join('');
    }

    async function selectHorseForAssign(horseId) {
      if (!currentAssignSessionId || !horseId) {
        alert('Invalid session or horse');
        return;
      }

      try {
        const response = await fetch(
          `/api/user/sessions/assign/${currentStableId}/${currentAssignSessionId}/${horseId}`,
          { method: 'POST' }
        );

        if (!response.ok) {
          throw new Error('Failed to assign horse');
        }

        alert('Horse assigned successfully');
        closeAssignModal();
        loadUnassignedSessions(currentStableId);
        loadHorses(currentStableId);
      } catch (error) {
        console.error('Error assigning horse:', error);
        alert('Error assigning horse: ' + error.message);
      }
    }

    function calculateDuration(startTime, stopTime) {
      if (!startTime || !stopTime) return 'N/A';
      const start = new Date(startTime);
      const stop = new Date(stopTime);
      const diffMs = stop - start;
      const diffMins = Math.floor(diffMs / 60000);
      const hours = Math.floor(diffMins / 60);
      const mins = diffMins % 60;
      
      if (hours > 0) {
        return `${hours}h ${mins}m`;
      }
      return `${mins}m`;
    }

    function escapeHtml(text) {
      const div = document.createElement('div');
      div.textContent = text;
      return div.innerHTML;
    }
  </script>
</body>
</html>
